from flask import Flask, request, render_template_string, redirect, url_for, session
import subprocess
import shlex
import os
from threading import Thread

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # needed for session

LOG_DIR = os.path.expanduser("~/yt_logs")
DOWNLOAD_DIR = os.path.expanduser("~/yt_downloads")
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

PASSWORD = "Waheed123"

# HTML templates
LOGIN_PAGE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
</head>
<body>
    <h2>Enter Password to Access YouTube Downloader</h2>
    {% if error %}
    <p style="color:red;">{{ error }}</p>
    {% endif %}
    <form method="POST">
        Password: <input type="password" name="password" required>
        <button type="submit">Enter</button>
    </form>
</body>
</html>
'''

DOWNLOAD_PAGE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>YouTube Downloader</title>
    <style>
        body { font-family: monospace; padding: 20px; }
        pre { background: #f0f0f0; padding: 10px; max-height: 400px; overflow: auto; }
        input { width: 400px; }
    </style>
</head>
<body>
    <h2>YouTube Video Downloader</h2>
    <form method="POST">
        YouTube URL: <input type="text" name="url" required>
        <button type="submit">Download</button>
    </form>

    {% if streaming %}
    <h3>Download Logs:</h3>
    <pre id="log"></pre>
    <script>
        const evtSource = new EventSource("/stream/{{ streaming }}");
        const log = document.getElementById("log");
        evtSource.onmessage = function(e) {
            log.textContent += e.data + "\\n";
            log.scrollTop = log.scrollHeight;
            if(e.data.includes("Download finished!")){
                window.location.href="/download_file/{{ streaming }}";
            }
        };
    </script>
    {% endif %}
</body>
</html>
'''

@app.route("/", methods=["GET", "POST"])
def login():
    if session.get("authenticated"):
        return redirect(url_for("index"))

    error = None
    if request.method == "POST":
        pw = request.form.get("password")
        if pw == PASSWORD:
            session["authenticated"] = True
            return redirect(url_for("index"))
        else:
            error = "Incorrect password!"
    return render_template_string(LOGIN_PAGE, error=error)

@app.route("/index", methods=["GET", "POST"])
def index():
    if not session.get("authenticated"):
        return redirect(url_for("login"))

    streaming_id = None
    if request.method == "POST":
        url = request.form.get("url")
        if url:
            streaming_id = str(abs(hash(url)))
            log_file = os.path.join(LOG_DIR, f"ytlog_{streaming_id}.txt")
            if os.path.exists(log_file):
                os.remove(log_file)
            # Start download in background
            Thread(target=start_download, args=(url, streaming_id)).start()

    return render_template_string(DOWNLOAD_PAGE, streaming=streaming_id)

def start_download(url, stream_id):
    log_file = os.path.join(LOG_DIR, f"ytlog_{stream_id}.txt")
    cmd = f'yt-dlp -o "{DOWNLOAD_DIR}/%(title)s.%(ext)s" {shlex.quote(url)}'
    process = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

    with open(log_file, "w") as f:
        f.write(f"Starting download: {url}\n")

    with open(log_file, "a") as f:
        for line in process.stdout:
            print(line, end="")
            f.write(line)
            f.flush()

    with open(log_file, "a") as f:
        f.write("Download finished!\n")

@app.route("/stream/<stream_id>")
def stream_logs(stream_id):
    log_file = os.path.join(LOG_DIR, f"ytlog_{stream_id}.txt")

    def generate():
        open(log_file, 'a').close()
        last_line = ""
        while True:
            if os.path.exists(log_file):
                with open(log_file, "r") as f:
                    lines = f.readlines()
                    new_lines = lines[lines.index(last_line)+1:] if last_line in lines else lines
                    for line in new_lines:
                        last_line = line
                        yield f"data: {line.rstrip()}\n\n"
            import time
            time.sleep(0.5)

    return app.response_class(generate(), mimetype='text/event-stream')

@app.route("/download_file/<stream_id>")
def download_file(stream_id):
    # Find the downloaded file
    files = os.listdir(DOWNLOAD_DIR)
    if not files:
        return "File not found yet.", 404
    # Return first file (simplest way)
    filepath = os.path.join(DOWNLOAD_DIR, files[0])
    from flask import send_file
    return send_file(filepath, as_attachment=True)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, threaded=True)
